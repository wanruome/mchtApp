package com.ruomm.base.common.greendao;

import com.ruomm.base.ioc.annotation.NotProguard;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table DBENTRY_VALUE.
 */
@NotProguard
public class DBEntryValueDao extends AbstractDao<DBEntryValue, Long> {

	public static final String TABLENAME = "DBENTRY_VALUE";

	/**
	 * Properties of entity DBEntryValue.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Key = new Property(1, String.class, "key", false, "KEY");
		public final static Property Tag = new Property(2, String.class, "tag", false, "TAG");
		public final static Property Value = new Property(3, String.class, "value", false, "VALUE");
		public final static Property ValueTag = new Property(4, String.class, "valueTag", false, "VALUE_TAG");
		public final static Property UpdateTime = new Property(5, java.util.Date.class, "updateTime", false,
				"UPDATE_TIME");
	};

	public DBEntryValueDao(DaoConfig config) {
		super(config);
	}

	public DBEntryValueDao(DaoConfig config, BaseDaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'DBENTRY_VALUE' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'KEY' TEXT NOT NULL ," + // 1: key
				"'TAG' TEXT," + // 2: tag
				"'VALUE' TEXT," + // 3: value
				"'VALUE_TAG' TEXT," + // 4: valueTag
				"'UPDATE_TIME' INTEGER NOT NULL );"); // 5: updateTime
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBENTRY_VALUE'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, DBEntryValue entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		stmt.bindString(2, entity.getKey());

		String tag = entity.getTag();
		if (tag != null) {
			stmt.bindString(3, tag);
		}

		String value = entity.getValue();
		if (value != null) {
			stmt.bindString(4, value);
		}

		String valueTag = entity.getValueTag();
		if (valueTag != null) {
			stmt.bindString(5, valueTag);
		}
		stmt.bindLong(6, entity.getUpdateTime().getTime());
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public DBEntryValue readEntity(Cursor cursor, int offset) {
		DBEntryValue entity = new DBEntryValue( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getString(offset + 1), // key
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tag
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // value
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // valueTag
				new java.util.Date(cursor.getLong(offset + 5)) // updateTime
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, DBEntryValue entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setKey(cursor.getString(offset + 1));
		entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
		entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
		entity.setValueTag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
		entity.setUpdateTime(new java.util.Date(cursor.getLong(offset + 5)));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(DBEntryValue entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(DBEntryValue entity) {
		if (entity != null) {
			return entity.getId();
		}
		else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
